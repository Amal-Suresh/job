"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[4378],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="What is difference between enum vs const?",s={unversionedId:"questions/typescript/enum-vs-const",id:"questions/typescript/enum-vs-const",title:"What is difference between enum vs const?",description:"There are some differences between using an enum and a const object to define a set of related values in TypeScript:",source:"@site/interview/questions/typescript/enum-vs-const.md",sourceDirName:"questions/typescript",slug:"/questions/typescript/enum-vs-const",permalink:"/questions/typescript/enum-vs-const",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/typescript/enum-vs-const.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is `enum` and why to use?",permalink:"/questions/typescript/enum-type"},next:{title:"Interfaces vs Types",permalink:"/questions/typescript/interface-vs-type"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-is-difference-between-enum-vs-const"},"What is difference between enum vs const?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"enum EColors {\n    Red = 'red',\n    Green = 'green',\n    Blue = 'blue',\n}\n\nconst COLORS = {\n    Red: 'red',\n    Green: 'green',\n    Blue: 'blue',\n} as const;\n")),(0,a.kt)("p",null,"There are some differences between using an ",(0,a.kt)("inlineCode",{parentName:"p"},"enum")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," object to define a set of related values in TypeScript:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Naming:")," An ",(0,a.kt)("inlineCode",{parentName:"li"},"enum")," allows you to define a set of named values, while a ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," object allows you to define an object with a fixed set of properties and values. An ",(0,a.kt)("inlineCode",{parentName:"li"},"enum")," can be easier to read and understand, as it provides a clear and concise way to represent a set of related values, while a ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," object can be more verbose and less intuitive, as it requires you to define the properties and values of the object explicitly."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Values:")," An ",(0,a.kt)("inlineCode",{parentName:"li"},"enum")," assigns default values to its constants, which are typically numbers starting from ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),", but you can also specify custom values for the constants if needed. A ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," object does not assign any values to its properties, and you have to specify the values of the properties explicitly."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Type compatibility:")," An ",(0,a.kt)("inlineCode",{parentName:"li"},"enum")," is a type in TypeScript, and it can be used as a type parameter, a type argument, a function return type, or a variable type. A ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," object is not a type in TypeScript, and it cannot be used in these contexts. Instead, you can use the type of the properties of a ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," object, or create an interface or a type alias to represent the structure of the object.")))}u.isMDXComponent=!0}}]);