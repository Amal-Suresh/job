"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[1484],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,d=c["".concat(m,".").concat(h)]||c[h]||u[h]||i;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={},a="What is Polymorphism?",s={unversionedId:"questions/common/polymorphism",id:"questions/common/polymorphism",title:"What is Polymorphism?",description:"Polymorphism is a fundamental concept in object-oriented programming (OOP) that refers to the ability of different objects to respond to the same method or property in different ways. In JavaScript, polymorphism can be achieved through a variety of techniques, including inheritance, method overriding, and function overloading.",source:"@site/interview/questions/common/polymorphism.md",sourceDirName:"questions/common",slug:"/questions/common/polymorphism",permalink:"/questions/common/polymorphism",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/common/polymorphism.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is Parallel execution?",permalink:"/questions/common/parallel-execution"},next:{title:"Single Responsibility Principle",permalink:"/questions/common/single-responsibility-principle"}},m={},p=[],l={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"what-is-polymorphism"},"What is Polymorphism?"),(0,o.kt)("p",null,"Polymorphism is a fundamental concept in object-oriented programming (OOP) that refers to the ability of different objects to respond to the same method or property in different ways. In JavaScript, polymorphism can be achieved through a variety of techniques, including inheritance, method overriding, and function overloading."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Inheritance and method overriding allow different objects to respond to the same method in different ways at runtime. This is known as runtime polymorphism or dynamic polymorphism."),(0,o.kt)("li",{parentName:"ul"},"Function overloading allows multiple functions with the same name to be defined with different sets of arguments. This is known as compile-time polymorphism or static polymorphism.")),(0,o.kt)("p",null,"Here is an example of polymorphism:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"abstract class Shape {\n    abstract get area(): number;\n}\n\nclass Rectangle extends Shape {\n    width: number;\n    height: number;\n\n    constructor(width: number, height: number) {\n        super();\n\n        this.width = width;\n        this.height = height;\n    }\n\n    get area() {\n        return this.width * this.height;\n    }\n}\n\nclass Circle extends Shape {\n    radius: number;\n\n    constructor(radius: number) {\n        super();\n\n        this.radius = radius;\n    }\n\n    get area() {\n        return Math.PI * this.radius * this.radius;\n    }\n}\n\nconst shapes = [new Rectangle(2, 4), new Circle(2)];\nconst areas = shapes.map((shape) => shape.area);\n")))}c.isMDXComponent=!0}}]);