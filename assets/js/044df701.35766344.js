"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[7181],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,g=u["".concat(c,".").concat(f)]||u[f]||m[f]||a;return t?o.createElement(g,i(i({ref:n},p),{},{components:t})):o.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={},i="Explain type converting in JS",s={unversionedId:"questions/javascript/type-converting",id:"questions/javascript/type-converting",title:"Explain type converting in JS",description:"In JavaScript, type conversion refers to the process of converting a value from one data type to another. There are explicit and implicit type conversions.",source:"@site/interview/questions/javascript/type-converting.md",sourceDirName:"questions/javascript",slug:"/questions/javascript/type-converting",permalink:"/questions/javascript/type-converting",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/javascript/type-converting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:'Why is it better to leave the global scope "as is" and not touch it?',permalink:"/questions/javascript/pure-global-scope"},next:{title:"What is the difference between undefined and is not defined?",permalink:"/questions/javascript/undefined-vs-not-defined"}},c={},l=[],p={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"explain-type-converting-in-js"},"Explain type converting in JS"),(0,r.kt)("p",null,"In JavaScript, type conversion refers to the process of converting a value from one data type to another. ",(0,r.kt)("em",{parentName:"p"},"There are explicit and implicit type conversions.")),(0,r.kt)("p",null,"Examples of explicit type conversion, also known as type casting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'console.log(Number("5")); // 5\nconsole.log(Number(true)); // 1\nconsole.log(String(5)); // "5"\nconsole.log(String(false)); // "false"\n\nconst num = 3.14159;\nconsole.log(num.toString()); // "3.14159"\nconsole.log(num.toFixed(2)); // "3.14"\nconsole.log(num.toPrecision(4)); // "3.142"\n\nconst obj = {name: \'John\', age: 30};\nconst jsonStr = JSON.stringify(obj); // "{name: \'John\', age: 30}"\nconsole.log(JSON.parse(jsonString)); // {name: \'John\', age: 30}\n')),(0,r.kt)("p",null,"Examples of implicit type conversion, also known as type coercion:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// operator `+` to concat strings, numbers\nconsole.log(5 + \'5\'); // "55"\n\n// operator `==` to compare values of different types\nconsole.log("5" == 5); // true\nconsole.log("5" === 5); // false\n\n// to boolean\nconsole.log(Boolean(0)); // false\nconsole.log(Boolean("hello")); // true\n\n// to number\nconsole.log(parseInt("123")); // 123\nconsole.log(parseFloat("3.14")); 3.14\nconsole.log(\'5\' * 2); // 5\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"It is important to note that type coercion can sometimes lead to unexpected behavior, so it's a good idea to be aware of it when working with JavaScript.")))}u.isMDXComponent=!0}}]);