"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[2495],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,y=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return t?r.createElement(y,l(l({ref:n},u),{},{components:t})):r.createElement(y,l({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={},l="How to handle multiple asynchronous operations?",s={unversionedId:"questions/javascript/handling-multiple-async-operations",id:"questions/javascript/handling-multiple-async-operations",title:"How to handle multiple asynchronous operations?",description:"There are several ways to handle multiple asynchronous operations in JavaScript:",source:"@site/interview/questions/javascript/handling-multiple-async-operations.md",sourceDirName:"questions/javascript",slug:"/questions/javascript/handling-multiple-async-operations",permalink:"/questions/javascript/handling-multiple-async-operations",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/javascript/handling-multiple-async-operations.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is a Generator function?",permalink:"/questions/javascript/generator-function"},next:{title:"What is a higher-order function?",permalink:"/questions/javascript/higher-order-function"}},i={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-handle-multiple-asynchronous-operations"},"How to handle multiple asynchronous operations?"),(0,a.kt)("p",null,"There are several ways to handle multiple asynchronous operations in JavaScript:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Callback functions"),": it can be a simple way to handle multiple operations, but it can become unwieldy if there are a large number of requests or if the operations are nested.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function delayedFn(ms, callback) {\n    console.log('Start');\n    if (ms < 1000) {\n        callback('Too little time - It must be more than 1000 ms!');\n    } else {\n        setTimeout(() => {\n            console.log('Finish');\n            callback(null, ms);\n        }, ms);\n    }\n};\n\ndelayedFn(900, (err, ms) => {\n    if (err) {\n        console.error('Error', err);\n    } else {\n        delayedFn(ms, (err, ms) => {\n            if (err) {\n                console.error('Error', err);\n            } else {\n                // try to do third nested callback\n            }\n        });\n    }\n});\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Promises"),": they allow developers to chain together asynchronous operations in a more readable and concise way, and they provide a built-in mechanism for handling errors.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function delayedFn(ms) {\n    return new Promise((resolve, reject) => {\n        console.log('Start')\n    \n        if (ms < 1000) {\n            reject('Too little time - It must be more than 1000 ms!');\n        } else {\n            setTimeout(() => {\n                console.log('Finish');\n                resolve(ms);\n            }, ms);\n        }\n    });\n}\n\ndelayedFn(900)\n    .then(ms => delayedFn(ms))\n    .catch(err => console.error(err))\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Async/await"),": The ",(0,a.kt)("inlineCode",{parentName:"li"},"async")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"await")," keywords, introduced in ECMAScript 2017, provide a way to write asynchronous code in a synchronous style. This can make it easier to handle multiple asynchronous requests in a more readable and intuitive way.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"(async function() {\n    const ms = 900;\n    \n    try {\n        const result1 = await delayedFn(ms);\n        const result2 = await delayedFn(result1);\n    } catch(err) {\n        console.error(err);\n    }\n})()\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Parallel execution"),": If multiple requests can be made in parallel and the order of their completion does not matter:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Promise.all()")," function can be used to execute a group of promises in parallel and wait for all of them to complete. If one of them fullfills with error it will be a error:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"```js\n")),(0,a.kt)("p",{parentName:"li"},"(async function() {\ntry {\nconst ","[result1, result2]"," = await Promise.all(","[\ndelayedFn(900),\ndelayedFn(1000),\n]",");"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"    console.log(`result1: ${result1.status} and result2: ${result2.status}`);\n} catch(err) {\n    console.error(err);\n}\n")),(0,a.kt)("p",{parentName:"li"},"})()"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- `Promise.allSettled()` - similiar with `Promise.all()` but returns all results and all errors:\n```js\n(async function() {\n    const [result1, result2] = await Promise.allSettled([\n        delayedFn(900),\n        delayedFn(1000),\n    ]);\n\n    console.log(`result1: ${result1.status} and result2: ${result2.status}`);\n})()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Promise.race()"),": fulfills when any of the promises fulfills; ",(0,a.kt)("strong",{parentName:"li"},"rejects when any of the promises rejects"),". It returns one promise.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"(async function() {\n    try {\n        const quickest = await Promise.race([\n            delayedFn(900),\n            delayedFn(1000),\n        ]);\n\n        console.log(`quickest value: ${quickest}`);\n    } catch(err) {\n        console.error(err);\n    }\n})()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Promise.any()"),": fulfills when any of the promises fulfills; ",(0,a.kt)("strong",{parentName:"li"},"rejects when all of the promises reject"),". It returns one promise.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"(async function() {\n    try {\n        const quickest = await Promise.any([\n            delayedFn(900),\n            delayedFn(1000),\n        ]);\n\n        console.log(`rquickest value: ${quickest}`);\n    } catch(err) {\n        console.error(err);\n    }\n})()\n")))}p.isMDXComponent=!0}}]);