"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[7565],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(r),h=a,d=c["".concat(s,".").concat(h)]||c[h]||p[h]||i;return r?n.createElement(d,o(o({ref:t},m),{},{components:r})):n.createElement(d,o({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},2547:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={tags:["Medium","Stack","Tree","Design"]},o="Binary Search Tree Iterator",l={unversionedId:"algorithms/medium/binary-search-tree-iterator",id:"algorithms/medium/binary-search-tree-iterator",title:"Binary Search Tree Iterator",description:"Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.",source:"@site/interview/algorithms/medium/binary-search-tree-iterator.md",sourceDirName:"algorithms/medium",slug:"/algorithms/medium/binary-search-tree-iterator",permalink:"/algorithms/medium/binary-search-tree-iterator",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/medium/binary-search-tree-iterator.md",tags:[{label:"Medium",permalink:"/tags/medium"},{label:"Stack",permalink:"/tags/stack"},{label:"Tree",permalink:"/tags/tree"},{label:"Design",permalink:"/tags/design"}],version:"current",frontMatter:{tags:["Medium","Stack","Tree","Design"]},sidebar:"tutorialSidebar",previous:{title:"Add Two Numbers",permalink:"/algorithms/medium/add-two-numbers"},next:{title:"Binary Tree Inorder Traversal",permalink:"/algorithms/medium/binary-tree-inorder-traversal"}},s={},u=[],m={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-search-tree-iterator"},"Binary Search Tree Iterator"),(0,a.kt)("p",null,"Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST."),(0,a.kt)("p",null,"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"next()")," will return the next smallest number in the BST."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"next()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"hasNext()")," should run in average O(1) time and uses O(",(0,a.kt)("em",{parentName:"p"},"h"),") memory, where ",(0,a.kt)("em",{parentName:"p"},"h")," is the height of the tree."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Credits:"),"Special thanks to @ts for adding this problem and creating all test cases."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for binary tree\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @constructor\n * @param {TreeNode} root - root of the binary search tree\n */\nvar BSTIterator = function (root) {\n    this.stack = [];\n    this.pushAll(root);\n};\n\n/**\n * @this BSTIterator\n * @returns {boolean} - whether we have a next smallest number\n */\nBSTIterator.prototype.hasNext = function () {\n    return this.stack.length !== 0;\n};\n\n/**\n * @this BSTIterator\n * @returns {number} - the next smallest number\n */\nBSTIterator.prototype.next = function () {\n    var node = this.stack.pop();\n    this.pushAll(node.right);\n    return node.val;\n};\n\n/**\n * Your BSTIterator will be called like this:\n * var i = new BSTIterator(root), a = [];\n * while (i.hasNext()) a.push(i.next());\n */\n\nBSTIterator.prototype.pushAll = function (node) {\n    while (node) {\n        this.stack.push(node);\n        node = node.left;\n    }\n};\n"))))}c.isMDXComponent=!0}}]);