"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[2066],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,v=p["".concat(s,".").concat(f)]||p[f]||u[f]||i;return n?a.createElement(v,o(o({ref:t},d),{},{components:n})):a.createElement(v,o({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9981:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="Explain difference var vs let vs const",l={unversionedId:"questions/javascript/variable-declarations",id:"questions/javascript/variable-declarations",title:"Explain difference var vs let vs const",description:"- var is used to declare a variable. Variables declared with var are function-scoped, which means that they are only accessible within the function in which they are declared or within the global scope if they are declared outside of any function. Variables declared with var can be reassigned and redeclared within their scope.",source:"@site/interview/questions/javascript/variable-declarations.md",sourceDirName:"questions/javascript",slug:"/questions/javascript/variable-declarations",permalink:"/questions/javascript/variable-declarations",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/javascript/variable-declarations.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is the difference between undefined and is not defined?",permalink:"/questions/javascript/undefined-vs-not-defined"},next:{title:"What are `WeakMap` and `WeakSet` objects?",permalink:"/questions/javascript/weakmap-weakset-objects"}},s={},c=[],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"explain-difference-var-vs-let-vs-const"},"Explain difference var vs let vs const"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"var")," is used to declare a variable. Variables declared with ",(0,r.kt)("inlineCode",{parentName:"li"},"var")," are function-scoped, which means that they are only accessible within the function in which they are declared or within the global scope if they are declared outside of any function. Variables declared with ",(0,r.kt)("inlineCode",{parentName:"li"},"var")," can be ",(0,r.kt)("strong",{parentName:"li"},"reassigned")," and ",(0,r.kt)("strong",{parentName:"li"},"redeclared")," within their scope."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"let")," - like ",(0,r.kt)("inlineCode",{parentName:"li"},"var"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"let")," declares a variable, but it is block-scoped, which means that it is only accessible within the block in which it is declared. Variables declared with ",(0,r.kt)("inlineCode",{parentName:"li"},"let")," can be ",(0,r.kt)("strong",{parentName:"li"},"reassigned"),", but they ",(0,r.kt)("strong",{parentName:"li"},"cannot be redeclared")," within their scope."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"const"),"is similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"let"),", but it declares a constant variable, which means that the value ",(0,r.kt)("strong",{parentName:"li"},"cannot be reassigned"),".")),(0,r.kt)("p",null,"Examples of the different variable declarations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"v0; // ReferenceError: v0 is not defined\nv1; // undefined, because hoisting\nvar v1 = 'var 1';\nv1 = 1; // 1\n\n// Task 1:\nvar v2 = 'var 2';\nfunction fn1() {\n    v2 = 'var fn1';\n}\nfn1();\nv2; // ?; try to guess\n\n\nl1; // ReferenceError: Cannot access 'l0' before initialization\nlet l1 = 'let 1';\nl1 = 1; // 1\n\n// Task 2:\nlet l2 = 'let 2';\nfunction fn2() {\n    let l2 = 'let fn2';\n}\nfn2();\nl2; // ?; try to guess\n\nconst c1 = 'const 1';\nc1 = 1; // TypeError: Assignment to constant variable\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In general, it is recommended to use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," whenever possible to declare variables that will not be reassigned, and to use ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," for variables that will be reassigned.")))}p.isMDXComponent=!0}}]);