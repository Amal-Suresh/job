"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[7592],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),m=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=m(n),f=a,h=p["".concat(u,".").concat(f)]||p[f]||c[f]||i;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const i={tags:["Medium","Hash Table","Binary Search"],title:"Sum of the 4 (2)"},l=void 0,o={unversionedId:"algorithms/medium/sum-4-2",id:"algorithms/medium/sum-4-2",title:"Sum of the 4 (2)",description:"Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.",source:"@site/interview/algorithms/medium/sum-4-2.md",sourceDirName:"algorithms/medium",slug:"/algorithms/medium/sum-4-2",permalink:"/algorithms/medium/sum-4-2",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/medium/sum-4-2.md",tags:[{label:"Medium",permalink:"/tags/medium"},{label:"Hash Table",permalink:"/tags/hash-table"},{label:"Binary Search",permalink:"/tags/binary-search"}],version:"current",frontMatter:{tags:["Medium","Hash Table","Binary Search"],title:"Sum of the 4 (2)"},sidebar:"tutorialSidebar",previous:{title:"Sum of the 4",permalink:"/algorithms/medium/sum-4-1"},next:{title:"Hard Tasks",permalink:"/category/hard-tasks"}},u={},m=[],s={toc:m};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Given four lists A, B, C, D of integer values, compute how many tuples ",(0,a.kt)("inlineCode",{parentName:"p"},"(i, j, k, l)")," there are such that ",(0,a.kt)("inlineCode",{parentName:"p"},"A[i] + B[j] + C[k] + D[l]")," is zero."),(0,a.kt)("p",null,"To make problem a bit easier, all A, B, C, D have same length of N where 0 \u2264 N \u2264 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input:\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\nOutput: 2\n\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Solution"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity: O(n^2)"),(0,a.kt)("li",{parentName:"ul"},"Space complexity: O(1)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function fourSumCount(A, B, C, D) {\n    const map = {};\n    let res = 0;\n    let key = 0;\n\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            key = A[i] + B[j];\n            map[key] = (map[key] || 0) + 1;\n        }\n    }\n\n    for (let i = 0; i < C.length; i++) {\n        for (let j = 0; j < D.length; j++) {\n            key = -(C[i] + D[j]);\n            res += map[key] || 0;\n        }\n    }\n\n    return res;\n}\n"))))}p.isMDXComponent=!0}}]);