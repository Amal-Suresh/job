"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[8505],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},s="What do Javascript types exist?",i={unversionedId:"questions/javascript/javascript-types",id:"questions/javascript/javascript-types",title:"What do Javascript types exist?",description:"In JavaScript, there are six primitive types:",source:"@site/interview/questions/javascript/javascript-types.md",sourceDirName:"questions/javascript",slug:"/questions/javascript/javascript-types",permalink:"/questions/javascript/javascript-types",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/javascript/javascript-types.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to use `new Function()`?",permalink:"/questions/javascript/how-to-use-new-function"},next:{title:"What are `Map` and `Set` objects?",permalink:"/questions/javascript/map-set-objects"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-do-javascript-types-exist"},"What do Javascript types exist?"),(0,a.kt)("p",null,"In JavaScript, there are ",(0,a.kt)("strong",{parentName:"p"},"six primitive types"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Number")," represents numeric values.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// different representions of value 256:\nconst num1 = 256; // integer Number\nconst num2 = 256.00; // float Number\nconst num3 = 0x100; // hexadecimal Number\nconst num4 = 2.56e2; // exponential Number\n\n// with methods:\nconst num5 = Number('256');\nconst num6 = parseInt('256.123');\nconst num7 = parseFloat('256.00');\n\n// special values:\nconst NAN = NaN;\nconst INFINITY = Infinity; // 1 / 0\n\n// it's also valid syntax:\nconst oneMillion = 1_000_000;\n\ntypeof num1; // 'number'\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"String")," represents a sequence of characters, or text. Strings can be enclosed in single or double quotes.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const str1 = 'string';\nconst str2 = `${str1}`;\nconst str3 = String(true);\n\ntypeof str1; // 'string'\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Boolean")," represents a logical value, either true or false.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const bool = true;\n\n// all values are false:\nconst bool1 = false;\nconst bool2 = !bool;\nconst bool3 = !!bool1;\nconst bool4 = Boolean(0);\nconst bool5 = Boolean('');\nconst bool6 = Boolean(undefined);\nconst bool7 = Boolean(null);\n\ntypeof bool; // 'boolean'\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"null")," represents a null value, which indicates an absence of a value or a null reference.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const NULL = null;\n\ntypeof NULL; // 'object'\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," represents an undefined value, which indicates that a variable has been declared but has not been assigned a value.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const UNDEFINED = undefined;\n\ntypeof UNDEFINED; // 'undefined'\n")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol")," represents a unique, immutable value. Symbols are used as a way to create unique, hidden keys for object properties.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const sym1 = Symbol('key');\nconst sym2 = Symbol('key');\n\nsym1 !== sym2; // true\n\ntypeof sym1; // 'symbol'\n")),(0,a.kt)("p",null,"In addition to these primitive types, JavaScript also has a number of object types, including arrays, functions, and objects."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const arr = [];\nconst fn = () => {};\nconst obj = {};\n\ntypeof arr; // 'object'\ntypeof fn; // 'function'\ntypeof obj; // 'object'\n")))}u.isMDXComponent=!0}}]);