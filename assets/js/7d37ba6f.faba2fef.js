"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[731],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,b=d["".concat(s,".").concat(c)]||d[c]||p[c]||i;return n?r.createElement(b,o(o({ref:t},m),{},{components:n})):r.createElement(b,o({ref:t},m))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={tags:["Medium","Linked List","Math"]},o="Add Two Numbers",l={unversionedId:"algorithms/medium/add-two-numbers",id:"algorithms/medium/add-two-numbers",title:"Add Two Numbers",description:"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.",source:"@site/interview/algorithms/medium/add-two-numbers.md",sourceDirName:"algorithms/medium",slug:"/algorithms/medium/add-two-numbers",permalink:"/algorithms/medium/add-two-numbers",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/medium/add-two-numbers.md",tags:[{label:"Medium",permalink:"/tags/medium"},{label:"Linked List",permalink:"/tags/linked-list"},{label:"Math",permalink:"/tags/math"}],version:"current",frontMatter:{tags:["Medium","Linked List","Math"]},sidebar:"tutorialSidebar",previous:{title:"Add One Row to Tree",permalink:"/algorithms/medium/add-one-row-to-tree"},next:{title:"Binary Tree Inorder Traversal",permalink:"/algorithms/medium/binary-tree-inorder-traversal"}},s={},u=[],m={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"add-two-numbers"},"Add Two Numbers"),(0,a.kt)("p",null,"You are given two ",(0,a.kt)("strong",{parentName:"p"},"non-empty")," linked lists representing two non-negative integers. The digits are stored in ",(0,a.kt)("strong",{parentName:"p"},"reverse order")," and each of their nodes contain a single digit. Add the two numbers and return it as a linked list."),(0,a.kt)("p",null,"You may assume the two numbers do not contain any leading zero, except the number 0 itself."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n    var carry = 0;\n    var sum = 0;\n    var head = new ListNode(0);\n    var now = head;\n    var a = l1;\n    var b = l2;\n    while (a !== null || b !== null) {\n        sum = (a ? a.val : 0) + (b ? b.val : 0) + carry;\n        carry = Math.floor(sum / 10);\n        now.next = new ListNode(sum % 10);\n        now = now.next;\n        a = a ? a.next : null;\n        b = b ? b.next : null;\n    }\n    if (carry) now.next = new ListNode(carry);\n    return head.next;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity: O(max(m,n))."),(0,a.kt)("li",{parentName:"ul"},"Space complexity: O(max(m,n))."))))}d.isMDXComponent=!0}}]);