"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[4343],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=u(n),v=i,f=l["".concat(p,".").concat(v)]||l[v]||d[v]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=v;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},4966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={},o="void` vs `undefined",s={unversionedId:"questions/typescript/void-vs-undefined",id:"questions/typescript/void-vs-undefined",title:"void` vs `undefined",description:"In TypeScript, void is a type that represents the absence of a value. The void type is used to indicate that a function does not return a value, or that a variable or expression has no value.",source:"@site/interview/questions/typescript/void-vs-undefined.md",sourceDirName:"questions/typescript",slug:"/questions/typescript/void-vs-undefined",permalink:"/questions/typescript/void-vs-undefined",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/typescript/void-vs-undefined.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What utility types exist and their usage",permalink:"/questions/typescript/utility-types"},next:{title:"What is TypeScript",permalink:"/questions/typescript/what-is-typescript"}},p={},u=[],c={toc:u};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"void-vs-undefined"},(0,i.kt)("inlineCode",{parentName:"h1"},"void")," vs ",(0,i.kt)("inlineCode",{parentName:"h1"},"undefined")),(0,i.kt)("p",null,"In TypeScript, ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," is a type that represents the absence of a value. The ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," type is used to indicate that a function does not return a value, or that a variable or expression has no value."),(0,i.kt)("p",null,"On the other hand, ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," is a value that represents the absence of a value or a variable that has not been assigned a value. In JavaScript and TypeScript, ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," is a primitive value that represents the absence of a value or a variable that has not been assigned a value."))}l.isMDXComponent=!0}}]);