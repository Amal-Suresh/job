"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[6517],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},o=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),p=l(t),g=a,d=p["".concat(s,".").concat(g)]||p[g]||c[g]||i;return t?r.createElement(d,u(u({ref:n},o),{},{components:t})):r.createElement(d,u({ref:n},o))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,u=new Array(i);u[0]=g;var m={};for(var s in n)hasOwnProperty.call(n,s)&&(m[s]=n[s]);m.originalType=e,m[p]="string"==typeof e?e:a,u[1]=m;for(var l=2;l<i;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5097:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>u,default:()=>p,frontMatter:()=>i,metadata:()=>m,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={tags:["Medium","Array","Hash Table, Two Pointers"]},u="Sum 4",m={unversionedId:"algorithms/medium/sum-4",id:"algorithms/medium/sum-4",title:"Sum 4",description:"Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.",source:"@site/interview/algorithms/medium/sum-4.md",sourceDirName:"algorithms/medium",slug:"/algorithms/medium/sum-4",permalink:"/algorithms/medium/sum-4",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/medium/sum-4.md",tags:[{label:"Medium",permalink:"/tags/medium"},{label:"Array",permalink:"/tags/array"},{label:"Hash Table, Two Pointers",permalink:"/tags/hash-table-two-pointers"}],version:"current",frontMatter:{tags:["Medium","Array","Hash Table, Two Pointers"]},sidebar:"tutorialSidebar",previous:{title:"Sum 4 (ii)",permalink:"/algorithms/medium/sum-4-ii"},next:{title:"Hard Tasks",permalink:"/category/hard-tasks"}},s={},l=[],o={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sum-4"},"Sum 4"),(0,a.kt)("p",null,"Given an array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," of ",(0,a.kt)("strong",{parentName:"p"},"n")," integers and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", are there elements ",(0,a.kt)("strong",{parentName:"p"},"a"),", ",(0,a.kt)("strong",{parentName:"p"},"b"),", ",(0,a.kt)("strong",{parentName:"p"},"c"),", and ",(0,a.kt)("strong",{parentName:"p"},"d")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," such that ",(0,a.kt)("strong",{parentName:"p"},"a")," + ",(0,a.kt)("strong",{parentName:"p"},"b")," + ",(0,a.kt)("strong",{parentName:"p"},"c")," + ",(0,a.kt)("strong",{parentName:"p"},"d")," = ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),"? Find all unique quadruplets in the array which gives the sum of ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("p",null,"The solution set must not contain duplicate quadruplets."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function (nums, target) {\n    if (nums.length < 4) return [];\n\n    var len = nums.length;\n    var res = [];\n    var l = 0;\n    var r = 0;\n    var sum = 0;\n\n    nums.sort((a, b) => a - b);\n\n    for (var i = 0; i < len - 3; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;\n        if (nums[i] + nums[len - 1] + nums[len - 2] + nums[len - 3] < target) continue;\n\n        for (var j = i + 1; j < len - 2; j++) {\n            if (j > i + 1 && nums[j] === nums[j - 1]) continue;\n            if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) break;\n            if (nums[i] + nums[j] + nums[len - 1] + nums[len - 2] < target) continue;\n\n            l = j + 1;\n            r = len - 1;\n\n            while (l < r) {\n                sum = nums[i] + nums[j] + nums[l] + nums[r];\n\n                if (sum < target) {\n                    l++;\n                } else if (sum > target) {\n                    r--;\n                } else {\n                    res.push([nums[i], nums[j], nums[l], nums[r]]);\n                    while (l < r && nums[l] === nums[l + 1]) l++;\n                    while (l < r && nums[r] === nums[r - 1]) r--;\n                    l++;\n                    r--;\n                }\n            }\n        }\n    }\n\n    return res;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity : O(n^3)."),(0,a.kt)("li",{parentName:"ul"},"Space complexity : O(1)."))))}p.isMDXComponent=!0}}]);