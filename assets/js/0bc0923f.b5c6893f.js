"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[9768],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7329:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={},s="What is load balancer?",l={unversionedId:"questions/nodejs/load-balancer",id:"questions/nodejs/load-balancer",title:"What is load balancer?",description:"A load balancer is a process that takes in HTTP requests and forwards these HTTP requests to one of a collection of servers. Load balancers are usually used for performance purposes: if a server needs to do a lot of work for each request, one server might not be enough, but 2 servers alternating handling incoming requests might.",source:"@site/interview/questions/nodejs/load-balancer.md",sourceDirName:"questions/nodejs",slug:"/questions/nodejs/load-balancer",permalink:"/questions/nodejs/load-balancer",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/nodejs/load-balancer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is libuv?",permalink:"/questions/nodejs/libuv"},next:{title:"What are the types of memory leaks in NodeJS?",permalink:"/questions/nodejs/memory-leaks"}},i={},u=[],c={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"what-is-load-balancer"},"What is load balancer?"),(0,o.kt)("p",null,"A load balancer is a process that takes in HTTP requests and forwards these HTTP requests to one of a collection of servers. Load balancers are usually used for performance purposes: if a server needs to do a lot of work for each request, one server might not be enough, but 2 servers alternating handling incoming requests might."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1. Using cluster module:")),(0,o.kt)("p",null,"NodeJS has a built-in module called Cluster Module to take the advantage of a multi-core system. Using this module you can launch NodeJS instances to each core of your system. Master process listening on a port to accept client requests and distribute across the worker using some intelligent fashion. So, using this module you can utilize the working ability of your system."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2. Using PM2:")),(0,o.kt)("p",null,"PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without the downtime and to facilitate common system admin tasks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ pm2 start app.js -i max --name "Balancer"\n')),(0,o.kt)("p",null,"This command will run the app.js file on the cluster mode to the total no of core available on your server."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"3. Using Express module:")),(0,o.kt)("p",null,"The below code basically creates two Express Servers to handle the request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const body = require('body-parser');\nconst express = require('express');\n\nconst app1 = express();\nconst app2 = express();\n\n// Parse the request body as JSON\napp1.use(body.json());\napp2.use(body.json());\n\nconst handler = serverNum => (req, res) => {\n  console.log(`server ${serverNum}`, req.method, req.url, req.body);\n  res.send(`Hello from server ${serverNum}!`);\n};\n\n// Only handle GET and POST requests\napp1.get('*', handler(1)).post('*', handler(1));\napp2.get('*', handler(2)).post('*', handler(2));\n\napp1.listen(3000);\napp2.listen(3001);\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"4. Using nginx")))}p.isMDXComponent=!0}}]);