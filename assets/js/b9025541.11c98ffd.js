"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[2371],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=i,m=u["".concat(s,".").concat(d)]||u[d]||y[d]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2045:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={},o="Describe Unions and Intersection Types",p={unversionedId:"questions/typescript/union-intersection",id:"questions/typescript/union-intersection",title:"Describe Unions and Intersection Types",description:"In TypeScript, union types and intersection types are ways to specify multiple types for a single value.",source:"@site/interview/questions/typescript/union-intersection.md",sourceDirName:"questions/typescript",slug:"/questions/typescript/union-intersection",permalink:"/questions/typescript/union-intersection",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/typescript/union-intersection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What typeScript benefits you know?",permalink:"/questions/typescript/typescript-benefits"},next:{title:"What is `unknown` type?",permalink:"/questions/typescript/unknown-type"}},s={},l=[],c={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"describe-unions-and-intersection-types"},"Describe Unions and Intersection Types"),(0,i.kt)("p",null,"In TypeScript, union types and intersection types are ways to specify multiple types for a single value."),(0,i.kt)("p",null,"A union type represents a value that can be of one of several types. Union types are denoted using the ",(0,i.kt)("inlineCode",{parentName:"p"},"|")," character, and they allow you to specify that a value can be of multiple types. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let x: string | number;\n\nx = 'hello';  // valid\nx = 42;       // valid\nx = true;     // invalid\n")),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," variable is declared as a union type of ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),", which means that it can hold a value of either type. The value of ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," can be set to a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),", but not to a ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," or any other type."),(0,i.kt)("p",null,"An intersection type represents a value that is of multiple types. Intersection types are denoted using the ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," character, and they allow you to specify that a value must be of multiple types. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type User = {\n  name: string;\n  age: number;\n};\n\ntype Admin = {\n  role: string;\n};\n\ntype SuperUser = User & Admin;\n\nconst user: SuperUser = {\n  name: 'John',\n  age: 42,\n  role: 'admin'\n};\n")),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Admin")," types are defined, and they represent objects with different properties. The ",(0,i.kt)("inlineCode",{parentName:"p"},"SuperUser")," type is defined as an intersection of ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Admin"),", which means that it represents an object that must have both the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"age")," properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," type, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Admin")," type."))}u.isMDXComponent=!0}}]);