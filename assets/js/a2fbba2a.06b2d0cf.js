"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[8187],{4367:e=>{e.exports=JSON.parse('{"label":"Tree","permalink":"/tags/tree","allTagsPath":"/tags","count":6,"items":[{"id":"algorithms/medium/add-one-row-to-tree","title":"Add One Row to Tree","description":"Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.","permalink":"/algorithms/medium/add-one-row-to-tree"},{"id":"algorithms/medium/binary-tree-inorder-traversal","title":"Binary Tree Inorder Traversal","description":"Given a binary tree, return the inorder traversal of its nodes\' values.","permalink":"/algorithms/medium/binary-tree-inorder-traversal"},{"id":"algorithms/medium/binary-tree-level-order-traversal","title":"Binary Tree Level Order Traversal","description":"Given a binary tree, return the level order traversal of its nodes\' values. (ie, from left to right, level by level).","permalink":"/algorithms/medium/binary-tree-level-order-traversal"},{"id":"algorithms/hard/binary-tree-maximum-path-sum","title":"Binary Tree Maximum Path Sum","description":"Given a non-empty binary tree, find the maximum path sum.","permalink":"/algorithms/hard/binary-tree-maximum-path-sum"},{"id":"algorithms/hard/binary-tree-postorder-traversal","title":"Binary Tree Postorder Traversal","description":"Given a binary tree, return the postorder traversal of its nodes\' values.","permalink":"/algorithms/hard/binary-tree-postorder-traversal"},{"id":"algorithms/medium/binary-tree-preorder-traversal","title":"Binary Tree Preorder Traversal","description":"Given a binary tree, return the preorder traversal of its nodes\' values.","permalink":"/algorithms/medium/binary-tree-preorder-traversal"}]}')}}]);