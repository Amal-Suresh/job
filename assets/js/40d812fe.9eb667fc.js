"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[4961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=o,c=m["".concat(d,".").concat(h)]||m[h]||s[h]||a;return n?r.createElement(c,i(i({ref:t},u),{},{components:n})):r.createElement(c,i({ref:t},u))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={tags:["Medium","Tree"]},i="Add One Row to Tree",l={unversionedId:"algorithms/medium/add-one-row-to-tree",id:"algorithms/medium/add-one-row-to-tree",title:"Add One Row to Tree",description:"Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.",source:"@site/interview/algorithms/medium/add-one-row-to-tree.md",sourceDirName:"algorithms/medium",slug:"/algorithms/medium/add-one-row-to-tree",permalink:"/algorithms/medium/add-one-row-to-tree",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/medium/add-one-row-to-tree.md",tags:[{label:"Medium",permalink:"/tags/medium"},{label:"Tree",permalink:"/tags/tree"}],version:"current",frontMatter:{tags:["Medium","Tree"]},sidebar:"tutorialSidebar",previous:{title:"Medium Tasks",permalink:"/category/medium-tasks"},next:{title:"Add Two Numbers",permalink:"/algorithms/medium/add-two-numbers"}},d={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-one-row-to-tree"},"Add One Row to Tree"),(0,o.kt)("p",null,"Given the root of a binary tree, then value ",(0,o.kt)("inlineCode",{parentName:"p"},"v")," and depth ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),", you need to add a row of nodes with value ",(0,o.kt)("inlineCode",{parentName:"p"},"v")," at the given depth ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),". The root node is at depth 1."),(0,o.kt)("p",null,"The adding rule is: given a positive integer depth ",(0,o.kt)("inlineCode",{parentName:"p"},"d"),", for each NOT null tree nodes ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," in depth ",(0,o.kt)("inlineCode",{parentName:"p"},"d-1"),", create two tree nodes with value ",(0,o.kt)("inlineCode",{parentName:"p"},"v")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"N's")," left subtree root and right subtree root. And ",(0,o.kt)("inlineCode",{parentName:"p"},"N's")," ",(0,o.kt)("strong",{parentName:"p"},"original left subtree")," should be the left subtree of the new left subtree root, its ",(0,o.kt)("strong",{parentName:"p"},"original right subtree")," should be the right subtree of the new right subtree root. If depth ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," is 1 that means there is no depth d-1 at all, then create a tree node with value ",(0,o.kt)("strong",{parentName:"p"},"v")," as the new root of the whole original tree, and the original tree is the new root's left subtree."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input:\nA binary tree as following:\n       4\n     /   \\\n    2     6\n   / \\   /\n  3   1 5\n\nv = 1\n\nd = 2\n\nOutput:\n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     /\n 3   1   5\n\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input:\nA binary tree as following:\n      4\n     /\n    2\n   / \\\n  3   1\n\nv = 1\n\nd = 3\n\nOutput:\n      4\n     /\n    2\n   / \\\n  1   1\n /     \\\n3       1\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The given d is in range ","[1, maximum depth of the given tree + 1]","."),(0,o.kt)("li",{parentName:"ul"},"The given binary tree has at least one tree node.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} v\n * @param {number} d\n * @return {TreeNode}\n */\nvar addOneRow = function (root, v, d) {\n    var head = new TreeNode(0);\n    head.left = root;\n    helper(head, v, d, 1);\n    return head.left;\n};\n\nvar helper = function (root, v, d, depth) {\n    if (!root) return;\n    if (depth === d) {\n        insert(root, v, 'left');\n        insert(root, v, 'right');\n    } else {\n        helper(root.left, v, d, depth + 1);\n        helper(root.right, v, d, depth + 1);\n    }\n};\n\nvar insert = function (root, val, type) {\n    var node = new TreeNode(val);\n    node[type] = root[type];\n    root[type] = node;\n};\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Complexity:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time complexity: O(n)."),(0,o.kt)("li",{parentName:"ul"},"Space complexity: O(1)."))))}m.isMDXComponent=!0}}]);