"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[281],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function m(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),s=u(r),h=a,d=s["".concat(l,".").concat(h)]||s[h]||c[h]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[s]="string"==typeof e?e:a,i[1]=m;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4064:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>m,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={tags:["Hard","Tree","Depth-first Search"]},i="Binary Tree Maximum Path Sum",m={unversionedId:"algorithms/hard/binary-tree-maximum-path-sum",id:"algorithms/hard/binary-tree-maximum-path-sum",title:"Binary Tree Maximum Path Sum",description:"Given a non-empty binary tree, find the maximum path sum.",source:"@site/interview/algorithms/hard/binary-tree-maximum-path-sum.md",sourceDirName:"algorithms/hard",slug:"/algorithms/hard/binary-tree-maximum-path-sum",permalink:"/algorithms/hard/binary-tree-maximum-path-sum",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/hard/binary-tree-maximum-path-sum.md",tags:[{label:"Hard",permalink:"/tags/hard"},{label:"Tree",permalink:"/tags/tree"},{label:"Depth-first Search",permalink:"/tags/depth-first-search"}],version:"current",frontMatter:{tags:["Hard","Tree","Depth-first Search"]},sidebar:"tutorialSidebar",previous:{title:"Best Time to Buy and Sell Stock III",permalink:"/algorithms/hard/best-time-to-buy-and-sell-stock-iii"},next:{title:"Binary Tree Postorder Traversal",permalink:"/algorithms/hard/binary-tree-postorder-traversal"}},l={},u=[],p={toc:u};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-tree-maximum-path-sum"},"Binary Tree Maximum Path Sum"),(0,a.kt)("p",null,"Given a ",(0,a.kt)("strong",{parentName:"p"},"non-empty")," binary tree, find the maximum path sum."),(0,a.kt)("p",null,"For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain ",(0,a.kt)("strong",{parentName:"p"},"at least one node")," and does not need to go through the root."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: [-10,9,20,null,null,15,7]\n\n\xa0  -10\n\xa0 \xa0/ \\\n\xa0 9 \xa020\n\xa0 \xa0 / \xa0\\\n\xa0 \xa015 \xa0 7\n\nOutput: 42\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function (root) {\n    var max = Number.MIN_SAFE_INTEGER;\n    var maxSum = function (node) {\n        if (!node) return 0;\n        var left = Math.max(maxSum(node.left), 0);\n        var right = Math.max(maxSum(node.right), 0);\n        max = Math.max(left + right + node.val, max);\n        return Math.max(left, right) + node.val;\n    };\n    maxSum(root);\n    return max;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,a.kt)("li",{parentName:"ul"},"Space complexity : O(n)."))))}s.isMDXComponent=!0}}]);