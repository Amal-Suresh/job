"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[463],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),m=i,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const o={sidebar_position:999},a="Algorithms",s={unversionedId:"questions/algorithms",id:"questions/algorithms",title:"Algorithms",description:"TODO: Main definitions",source:"@site/interview/questions/algorithms.md",sourceDirName:"questions",slug:"/questions/algorithms",permalink:"/job/interview/questions/algorithms",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/algorithms.md",tags:[],version:"current",sidebarPosition:999,frontMatter:{sidebar_position:999},sidebar:"tutorialSidebar",previous:{title:"SOLID",permalink:"/job/interview/questions/solid"},next:{title:"Tasks",permalink:"/job/interview/category/tasks"}},p={},l=[{value:"Big O",id:"big-o",level:3},{value:"Amazon interview",id:"amazon-interview",level:3}],u={toc:l};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"algorithms"},"Algorithms"),(0,i.kt)("p",null,"TODO: Main definitions\nTODO: Review and Classify the main algorithms"),(0,i.kt)("h3",{id:"big-o"},"Big O"),(0,i.kt)("h3",{id:"amazon-interview"},"Amazon interview"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Question: You are given a dictionary containing thousands of words and a sentence with no spaces.\nWrite an algorithm to reconstruct the sentence by inserting spaces in the appropriate positions.\n\nExample:\n\n["the", "sky", "is", "blue", "the", "grass", "is", "green"]\n\ninput: "theskyisblue" output: "the sky is blue"\n\ninput: "thegrassisgreen" output: "the grass is green"\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nconst wordBreak = function (s, wordDict) {\n    var dp = Array(s.length);\n    var map = {};\n    var res = [];\n\n    for (var i = 0; i < wordDict.length; i++) {\n        map[wordDict[i]] = true;\n    }\n\n    return find(s, map, dp, 0);\n};\n\nconst find = function (s, map, dp, index) {\n    if (dp[index]) return dp[index];\n\n    var str = '';\n    var tmp = null;\n    var len = s.length;\n\n    dp[index] = [];\n\n    for (var i = index; i < len; i++) {\n        str = s.substring(index, i + 1);\n        if (!map[str]) continue;\n        if (i === len - 1) {\n            dp[index].push(str);\n            break;\n        }\n        tmp = find(s, map, dp, i + 1);\n        for (var j = 0; j < tmp.length; j++) {\n            dp[index].push(str + ' ' + tmp[j]);\n        }\n    }\n\n    return dp[index];\n};\n")))}c.isMDXComponent=!0}}]);