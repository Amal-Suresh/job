"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[4982],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||l;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={},i="Balanced Binary Tree",o={unversionedId:"algorithms/easy/balanced-binary-tree",id:"algorithms/easy/balanced-binary-tree",title:"Balanced Binary Tree",description:"-   Difficulty: Easy.",source:"@site/interview/algorithms/easy/balanced-binary-tree.md",sourceDirName:"algorithms/easy",slug:"/algorithms/easy/balanced-binary-tree",permalink:"/algorithms/easy/balanced-binary-tree",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/easy/balanced-binary-tree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Strings",permalink:"/algorithms/easy/add-strings"},next:{title:"Best Time to Buy and Sell Stock II",permalink:"/algorithms/easy/best-time-to-buy-and-sell-stock-ii"}},p={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],c={toc:u};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"balanced-binary-tree"},"Balanced Binary Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Difficulty: Easy."),(0,a.kt)("li",{parentName:"ul"},"Related Topics: Tree, Depth-first Search."),(0,a.kt)("li",{parentName:"ul"},"Similar Questions: Maximum Depth of Binary Tree.")),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"Given a binary tree, determine if it is height-balanced."),(0,a.kt)("p",null,"For this problem, a height-balanced binary tree is defined as:"),(0,a.kt)("p",null,"a binary tree in which the depth of the two subtrees of ",(0,a.kt)("strong",{parentName:"p"},"every")," node never differ by more than 1."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,"Given the following tree ",(0,a.kt)("inlineCode",{parentName:"p"},"[3,9,20,null,null,15,7]"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,a.kt)("p",null,"Return true."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,"Given the following tree ",(0,a.kt)("inlineCode",{parentName:"p"},"[1,2,2,3,3,null,null,4,4]"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n")),(0,a.kt)("p",null,"Return false."),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function (root) {\n    return helper(root, 0) >= 0;\n};\n\nvar helper = function (root, depth) {\n    if (!root) return depth;\n    var left = helper(root.left, depth + 1);\n    var right = helper(root.right, depth + 1);\n    if (left === -1 || right === -1 || Math.abs(left - right) > 1) return -1;\n    return Math.max(left, right);\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Explain:")),(0,a.kt)("p",null,"nope."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,a.kt)("li",{parentName:"ul"},"Space complexity : O(n).")))}s.isMDXComponent=!0}}]);