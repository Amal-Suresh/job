"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[1318],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>d});var n=t(7294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(t),v=l,d=m["".concat(s,".").concat(v)]||m[v]||c[v]||a;return t?n.createElement(d,i(i({ref:r},p),{},{components:t})):n.createElement(d,i({ref:r},p))}));function d(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=v;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[m]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<a;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},1870:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=t(7462),l=(t(7294),t(3905));const a={tags:["Medium","Tree","Breadth-first Search"]},i="Binary Tree Level Order Traversal",o={unversionedId:"algorithms/medium/binary-tree-level-order-traversal",id:"algorithms/medium/binary-tree-level-order-traversal",title:"Binary Tree Level Order Traversal",description:"Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).",source:"@site/interview/algorithms/medium/binary-tree-level-order-traversal.md",sourceDirName:"algorithms/medium",slug:"/algorithms/medium/binary-tree-level-order-traversal",permalink:"/algorithms/medium/binary-tree-level-order-traversal",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/medium/binary-tree-level-order-traversal.md",tags:[{label:"Medium",permalink:"/tags/medium"},{label:"Tree",permalink:"/tags/tree"},{label:"Breadth-first Search",permalink:"/tags/breadth-first-search"}],version:"current",frontMatter:{tags:["Medium","Tree","Breadth-first Search"]},sidebar:"tutorialSidebar",previous:{title:"Binary Tree Inorder Traversal",permalink:"/algorithms/medium/binary-tree-inorder-traversal"},next:{title:"Binary Tree Preorder Traversal",permalink:"/algorithms/medium/binary-tree-preorder-traversal"}},s={},u=[],p={toc:u};function m(e){let{components:r,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"binary-tree-level-order-traversal"},"Binary Tree Level Order Traversal"),(0,l.kt)("p",null,"Given a binary tree, return the ",(0,l.kt)("em",{parentName:"p"},"level order")," traversal of its nodes' values. (ie, from left to right, level by level)."),(0,l.kt)("p",null,"For example:\nGiven binary tree ",(0,l.kt)("inlineCode",{parentName:"p"},"[3,9,20,null,null,15,7]"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,l.kt)("p",null,"return its level order traversal as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[\n  [3],\n  [9,20],\n  [15,7]\n]\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Solution"))," 1",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n    if (!root) return [];\n    return helper([[root]], 0);\n};\n\nvar helper = function (res, level) {\n    var now = res[level];\n    var next = [];\n\n    for (var i = 0; i < now.length; i++) {\n        if (now[i].left) next.push(now[i].left);\n        if (now[i].right) next.push(now[i].right);\n        now[i] = now[i].val;\n    }\n\n    if (next.length) {\n        res.push(next);\n        helper(res, level + 1);\n    }\n\n    return res;\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Complexity:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time complexity: O(n)."),(0,l.kt)("li",{parentName:"ul"},"Space complexity: O(n).")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Solution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n    return helper([], root, 0);\n};\n\nvar helper = function (res, root, level) {\n    if (root) {\n        if (!res[level]) res[level] = [];\n        res[level].push(root.val);\n        helper(res, root.left, level + 1);\n        helper(res, root.right, level + 1);\n    }\n    return res;\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Complexity:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time complexity: O(n)."),(0,l.kt)("li",{parentName:"ul"},"Space complexity: O(n)."))))}m.isMDXComponent=!0}}]);