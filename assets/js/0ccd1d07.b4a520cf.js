"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[9042],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return t?r.createElement(b,s(s({ref:n},c),{},{components:t})):r.createElement(b,s({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={tags:["Hard","String","Dynamic Programming"]},s="Distinct Subsequences",o={unversionedId:"algorithms/hard/distinct-subsequences",id:"algorithms/hard/distinct-subsequences",title:"Distinct Subsequences",description:"Given a string S and a string T, count the number of distinct subsequences of S which equals T.",source:"@site/interview/algorithms/hard/distinct-subsequences.md",sourceDirName:"algorithms/hard",slug:"/algorithms/hard/distinct-subsequences",permalink:"/algorithms/hard/distinct-subsequences",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/hard/distinct-subsequences.md",tags:[{label:"Hard",permalink:"/tags/hard"},{label:"String",permalink:"/tags/string"},{label:"Dynamic Programming",permalink:"/tags/dynamic-programming"}],version:"current",frontMatter:{tags:["Hard","String","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"Candy",permalink:"/algorithms/hard/candy"},next:{title:"Dungeon Game",permalink:"/algorithms/hard/dungeon-game"}},l={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"distinct-subsequences"},"Distinct Subsequences"),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("strong",{parentName:"p"},"S")," and a string ",(0,a.kt)("strong",{parentName:"p"},"T"),", count the number of distinct subsequences of ",(0,a.kt)("strong",{parentName:"p"},"S")," which equals ",(0,a.kt)("strong",{parentName:"p"},"T"),"."),(0,a.kt)("p",null,"A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, ",(0,a.kt)("inlineCode",{parentName:"p"},'"ACE"')," is a subsequence of ",(0,a.kt)("inlineCode",{parentName:"p"},'"ABCDE"')," while ",(0,a.kt)("inlineCode",{parentName:"p"},'"AEC"')," is not)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: S = "rabbbit", T = "rabbit"\nOutput:\xa03\nExplanation:\n\nAs shown below, there are 3 ways you can generate "rabbit" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: S = "babgbag", T = "bag"\nOutput:\xa05\nExplanation:\n\nAs shown below, there are 5 ways you can generate "bag" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar numDistinct = function (s, t) {\n    var dp = Array(s.length)\n        .fill(0)\n        .map((_) => Array(t.length));\n    return helper(s, t, 0, 0, dp);\n};\n\nvar helper = function (s, t, sIndex, tIndex, dp) {\n    if (tIndex === t.length) return 1;\n    if (sIndex === s.length) return 0;\n    if (dp[sIndex][tIndex] === undefined) {\n        if (s[sIndex] === t[tIndex]) {\n            dp[sIndex][tIndex] = helper(s, t, sIndex + 1, tIndex + 1, dp) + helper(s, t, sIndex + 1, tIndex, dp);\n        } else {\n            dp[sIndex][tIndex] = helper(s, t, sIndex + 1, tIndex, dp);\n        }\n    }\n    return dp[sIndex][tIndex];\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity: O(m","*","n)."),(0,a.kt)("li",{parentName:"ul"},"Space complexity: O(m","*","n)."))))}u.isMDXComponent=!0}}]);