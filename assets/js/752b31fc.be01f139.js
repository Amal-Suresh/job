"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[3656],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},s="What is Reactor Pattern?",i={unversionedId:"questions/nodejs/nodejs-reactor-pattern",id:"questions/nodejs/nodejs-reactor-pattern",title:"What is Reactor Pattern?",description:"The Reactor pattern is a design pattern used in Node.js to handle asynchronous I/O operations. It is a concurrency pattern that provides a mechanism to demultiplex and dispatch service requests that are delivered to an application by one or more clients. The pattern defines a non-blocking event-driven architecture that abstracts the handling of multiple input events through the use of a central demultiplexing mechanism, such as an event loop. The event loop waits for events to occur on a set of registered handles, and then dispatches the appropriate event handlers to handle those events.",source:"@site/interview/questions/nodejs/nodejs-reactor-pattern.md",sourceDirName:"questions/nodejs",slug:"/questions/nodejs/nodejs-reactor-pattern",permalink:"/questions/nodejs/nodejs-reactor-pattern",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/nodejs/nodejs-reactor-pattern.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How do you structure a NodeJS project?",permalink:"/questions/nodejs/nodejs-project-structure"},next:{title:"How does routing work in NodeJS?",permalink:"/questions/nodejs/nodejs-routing"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"what-is-reactor-pattern"},"What is Reactor Pattern?"),(0,o.kt)("p",null,"The Reactor pattern is a design pattern used in Node.js to handle asynchronous I/O operations. It is a concurrency pattern that provides a mechanism to demultiplex and dispatch service requests that are delivered to an application by one or more clients. The pattern defines a non-blocking event-driven architecture that abstracts the handling of multiple input events through the use of a central demultiplexing mechanism, such as an event loop. The event loop waits for events to occur on a set of registered handles, and then dispatches the appropriate event handlers to handle those events."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reactor Pattern comprises of:")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1. Resources:"),"\xa0They are shared by multiple applications for I/O operations, generally slower in executions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2. Synchronous Event De-multiplexer/Event Notifier:"),"\xa0This uses Event Loop for blocking on all resources. When a set of I/O operations completes, the Event De-multiplexer pushes the new events into the Event Queue."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"3. Event Loop and Event Queue:"),"\xa0Event Queue queues up the new events that occurred along with its event-handler, pair."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"4. Request Handler/Application:"),"\xa0This is, generally, the application that provides the handler to be executed for registered events on resources."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"An example of the Reactor pattern in Node.js")," would be a server application that listens for incoming connections on a specific port. The event loop, or reactor, would register a handle for the server socket and wait for incoming connections."))}u.isMDXComponent=!0}}]);