"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[8725],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),y=o,d=u["".concat(p,".").concat(y)]||u[y]||m[y]||a;return n?r.createElement(d,s(s({ref:t},l),{},{components:n})):r.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},s="How do object prototypes work?",i={unversionedId:"questions/javascript/object-prototypes",id:"questions/javascript/object-prototypes",title:"How do object prototypes work?",description:"Prototypes are the mechanism by which JavaScript objects inherit features from one another.",source:"@site/interview/questions/javascript/object-prototypes.md",sourceDirName:"questions/javascript",slug:"/questions/javascript/object-prototypes",permalink:"/questions/javascript/object-prototypes",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/javascript/object-prototypes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Explain Mutable and Immutable values",permalink:"/questions/javascript/mutable-vs-immutable-values"},next:{title:"Tell about JS Operators",permalink:"/questions/javascript/operators"}},p={},c=[],l={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-do-object-prototypes-work"},"How do object prototypes work?"),(0,o.kt)("p",null,"Prototypes are the mechanism by which JavaScript objects inherit features from one another."),(0,o.kt)("p",null,"Every object in JavaScript has a built-in property, which is called its\xa0",(0,o.kt)("strong",{parentName:"p"},"prototype"),". The prototype is itself an object, so the prototype will have its own prototype, making what's called a\xa0",(0,o.kt)("strong",{parentName:"p"},"prototype chain"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// the latest prototy chain item is null\nObject.getPrototypeOf(Object.getPrototypeOf({})); // null\n")),(0,o.kt)("p",null,"Class property ",(0,o.kt)("inlineCode",{parentName:"p"},"prototype")," includes all props and methods for the class instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function Person(name) {\n    this.name = name;\n}\n\nconst personPrototype = {\n    greet() {\n        console.log(`hello, my name is ${this.name}!`);\n    },\n};\n\nObject.assign(Person.prototype, personPrototype);\n// or\n// Person.prototype.greet = personPrototype.greet;\n\nconst jack = new Person('Jack');\njack.greet(); // hello, my name is Jack!\n")),(0,o.kt)("p",null,"Properties that are defined directly in the object, like\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"name"),"\xa0here, are called\xa0",(0,o.kt)("strong",{parentName:"p"},"own properties"),", and you can check whether a property is an own property using the static\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Object.hasOwn()"),"\xa0method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const emil = new Person('Emil');\n\nObject.hasOwn(emil, 'name'); // true\nObject.hasOwn(emil, 'greet'); // false\n// or\nemil.hasOwnProperty('greet'); // false\n")),(0,o.kt)("p",null,"Difference between class and prototype notations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class Person {\n    constructor(name) {\n        this.name = name;\n        this.say = function (text) {\n            return `${this.name} said: ${text}`;\n        };\n    }\n\n    greet() {\n        return `Hello, my name is ${this.name}!`;\n    }\n\n    static random() {\n        return Math.random();\n    }\n}\n\nfunction Person(name) {\n    // own properties\n    this.name = name;\n    this.say = function (text) {\n        return `${this.name} said: ${text}`;\n    };\n}\n// extend Person prototype with method:\nPerson.prototype.greet = function () {\n    return `Hello, my name is ${this.name}!`;\n};\n// add static method:\nPerson.random = function () {\n    return Math.random();\n};\n\nconst emil = new Person('Emil');\n// iterate all properties of the instance\nfor (let key in emil) {\n    if (Object.hasOwn(emil, key)) {\n        // get only own properties: name, say\n        console.log(key);\n    }\n}\n")),(0,o.kt)("p",null,"And prototype inheritance example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function Student(name) {\n    // Call the parent constructor\n    Person.call(this, name);\n}\n// extend Student as a subclass of Person\nObject.setPrototypeOf(Student.prototype, Person.prototype);\n// inherited parent static properties\nObject.setPrototypeOf(Student, Person);\n\n// replace the parent method\nStudent.prototype.greet = function () {\n    return `Hi, I'm ${this.name} and I am a student`;\n};\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"It is not advisable to use setPrototypeOf() instead of extends due to performance and readability reasons.")))}u.isMDXComponent=!0}}]);