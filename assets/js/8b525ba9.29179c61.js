"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[2518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(i,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7002:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},s="What are the CSS selectors?",o={unversionedId:"questions/frontend/css-selectors",id:"questions/frontend/css-selectors",title:"What are the CSS selectors?",description:"A CSS selector is the part of a CSS rule set that actually selects the content you want to style.",source:"@site/interview/questions/frontend/css-selectors.md",sourceDirName:"questions/frontend",slug:"/questions/frontend/css-selectors",permalink:"/questions/frontend/css-selectors",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/questions/frontend/css-selectors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is CSS preprocessor?",permalink:"/questions/frontend/css-preprocessor"},next:{title:"What are the different types of CSS units, and how do they work?",permalink:"/questions/frontend/css-units"}},i={},p=[],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"what-are-the-css-selectors"},"What are the CSS selectors?"),(0,r.kt)("p",null,"A CSS selector is the part of a CSS rule set that actually selects the content you want to style."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"i) Universal Selector"),": The universal selector works like a wild card character, selecting all elements on a page. Every HTML page is built on content placed within HTML tags. Each set of tags represents an element on the page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"* {\n   color: green;\n   font-size: 20px;\n   line-height: 25px;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ii) Element Type Selector"),": This selector match one or more HTML elements of the same name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"ul {\n   list-style: none;\n   border: solid 1px #ccc;\n}\n\nli {\n    color: red;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<ul>\n  <li>Fish</li>\n  <li>Apples</li>\n  <li>Cheese</li>\n</ul>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"iii) ID Selector"),": This selector matches any HTML element that has an ID attribute with the same value as that of the selector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"#container {\n   width: 960px;\n   margin: 0 auto;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="container"></div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"iv) Class Selector"),": The class selector also matches all elements on the page that have their class attribute set to the same value as the class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".box {\n   padding: 20px;\n   margin: 10px;\n   width: 240px;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div class="box"></div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"v) Descendant Combinator"),": The descendant selector or, more accurately, the descendant combinator lets you combine two or more selectors, so you can be more specific in your selection method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"#container .box {\n   float: left;\n   padding-bottom: 15px;\n}\n")),(0,r.kt)("p",null,"This declaration block will apply to all elements that have a class of box that are inside an element with an ID of\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"container"),". It\u2019s worth noting that the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},".box"),"\xa0element doesn\u2019t have to be an immediate child: there could be another element wrapping\xa0",(0,r.kt)("inlineCode",{parentName:"p"},".box"),", and the styles would still apply."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="container">\n  <div class="box"></div>\n\n  <div class="box-2"></div>\n</div>\n\n<div class="box"></div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"vi) Child Combinator"),": A selector that uses the child combinator is similar to a selector that uses a descendant combinator, except it only targets immediate child elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"#container > .box {\n   float: left;\n   padding-bottom: 15px;\n}\n")),(0,r.kt)("p",null,"The selector will match all elements that have a class of\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"box"),"\xa0and that are immediate children of the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"#container"),"\xa0element. That means, unlike the descendant combinator, there can\u2019t be another element wrapping\xa0",(0,r.kt)("inlineCode",{parentName:"p"},".box"),"\u2014it has to be a direct child element."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="container">\n  <div class="box"></div>\n\n  <div>\n    <div class="box"></div>\n  </div>\n</div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"vii) General Sibling Combinator"),": A selector that uses a general sibling combinator matches elements based on sibling relationships. The selected elements are beside each other in the HTML."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"h2 ~ p {\n   margin-bottom: 20px;\n}\n")),(0,r.kt)("p",null,"In this example, all paragraph elements (",(0,r.kt)("inlineCode",{parentName:"p"},"<p>"),") will be styled with the specified rules, but only if they are siblings of\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"<h2>"),"\xa0elements. There could be other elements in between the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"<h2>"),"\xa0and\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"<p>"),", and the styles would still apply."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<div class="box">\n  <p>Paragraph example.</p>\n</div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"viii) Adjacent Sibling Combinator"),": A selector that uses the adjacent sibling combinator uses the plus symbol (+), and is almost the same as the general sibling selector. The difference is that the targeted element must be an immediate sibling, not just a general sibling."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"p + p {\n   text-indent: 1.5em;\n   margin-bottom: 0;\n}\n")),(0,r.kt)("p",null,"In this example will apply the specified styles only to paragraph elements that immediately follow other paragraph elements. This means the first paragraph element on a page would not receive these styles. Also, if another element appeared between two paragraphs, the second paragraph of the two wouldn\u2019t have the styles applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n\n<div class="box">\n  <p>Paragraph example.</p>\n  <p>Paragraph example.</p>\n</div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ix) Attribute Selector"),": The attribute selector targets elements based on the presence and/or value of HTML attributes, and is declared using square brackets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},'input[type="text"] {\n   background-color: #444;\n   width: 200px;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<input type="text">\n')),(0,r.kt)("p",null,"The attribute selector can also be declared using just the attribute itself, with no value, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"input[type] {\n   background-color: #444;\n   width: 200px;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"x) Pseudo-class"),": A pseudo-class uses a colon character to identify a pseudo-state that an element might be in\u2014for example, the state of being hovered, or the state of being activated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"a:hover {\n   color: red;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"xi) Pseudo-element"),": A CSS pseudo-element is used to style specified parts of an element. For example, it can be used to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Style the first letter, or line, of an element"),(0,r.kt)("li",{parentName:"ul"},"Insert content before, or after, the content of an element")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      p::first-line {\n        color: #ff0000;\n        font-variant: small-caps;\n      }\n\n      p::first-letter {\n        color: #ff0000;\n        font-size: xx-large;\n      }\n\n      h1::before {\n        content: url(smiley.gif);\n      }\n\n      h1::after {\n        content: url(smiley.gif);\n      }\n\n      ::selection {\n        color: red;\n        background: yellow;\n      }\n    </style>\n  </head>\n<body>\n  <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n  Lorem Ipsum has been the industry\\'s standard dummy text ever since the 1500s,\n  <h1>when an unknown printer took a galley of type and scrambled it to make a\n  type specimen book.<h1></p>\n</body>\n</html>\n")))}m.isMDXComponent=!0}}]);