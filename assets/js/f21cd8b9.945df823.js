"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[405],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="ReactJS",i={unversionedId:"Tech/reactjs",id:"Tech/reactjs",title:"ReactJS",description:"Junior level",source:"@site/interview/Tech/reactjs.md",sourceDirName:"Tech",slug:"/Tech/reactjs",permalink:"/job/interview/Tech/reactjs",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/Tech/reactjs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Databases",permalink:"/job/interview/Tech/database"},next:{title:"SOLID",permalink:"/job/interview/Tech/solid"}},l={},c=[{value:"Junior level",id:"junior-level",level:2},{value:"Ways to store data on client side:",id:"ways-to-store-data-on-client-side",level:3},{value:"Middle level",id:"middle-level",level:2},{value:"Senior level",id:"senior-level",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reactjs"},"ReactJS"),(0,r.kt)("h2",{id:"junior-level"},"Junior level"),(0,r.kt)("h3",{id:"ways-to-store-data-on-client-side"},"Ways to store data on client side:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. Cookies\n2. Web Storage API (localStorage, sessionStorage)\n3. IndexDB\n4. JS variables\n5. DOM Node Storage (dataset property or setAttribute(), getAttribute(), eg: someElement.dataset.store = \u2018some value\u2019)\n6. Cache API\n")),(0,r.kt)("h2",{id:"middle-level"},"Middle level"),(0,r.kt)("h3",{id:""}),(0,r.kt)("h2",{id:"senior-level"},"Senior level"),(0,r.kt)("h3",{id:"-1"}),(0,r.kt)("p",null,'\u0424\u0440\u043e\u043d\u0442\u0435\u043d\u0434\nHTML/CSS\n\u2022 \u0421\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0442\u043a\u0430\n\u2022 CSS \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b\n\u2022 \u041a\u0430\u043a\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0442\u0438\u043f\u044b \u0441\u0442\u0438\u043b\u0435\u0439 css \u0434\u043b\u044f html: inline css, external stylesheet, internal stylesheet\n\u2022 \u0422\u0438\u043f\u044b \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0432 html: canvas and svg\nReactJS\n\u2022 \u041a\u0440\u0430\u0442\u043a\u043e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0440\u0435\u0430\u043a\u0442:\n\u2022 Props vs State\n\u2022 \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\u0445 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0430\u0445 \u0440\u0435\u0430\u043a\u0442\u0430:\n\u2022 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Virtual DOM:\n\u2022 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 JSX, \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c className, \u0430 \u043d\u0435 class:\n\u2022 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0420\u0435\u0430\u043a\u0442 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442:\n\u2022 State vs Props:\nProps get passed to the component similar to function parameters\nState is managed within the component similar to variables declared within a function.\n\u2022 Controlled vs Uncontrolled components:\nA Controlled Component is one that takes its current value through props and notifies changes through callbacks like onChange. A parent component "controls" it by handling the callback and managing its own state and passing the new values as props to the controlled component. You could also call this a "dumb component".\nA Uncontrolled Component is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.\n\u2022 \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 React lifecycle:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2022 \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 Redux, \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b (single source of truth, state is read-only (action creator, reducer), Changes are made with pure functions)\n\u2022 Redux: mapStateToProps vs mapDispatchToProps\n\u2022 What are the differences between redux-saga and redux-thunk?\n")),(0,r.kt)("p",null,"Both Redux Thunk and Redux Saga take care of dealing with side effects. In most of the scenarios, Thunk uses Promises to deal with them, whereas Saga uses Generators. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.\n\u2022 React Context API\n\u2022 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u043d\u043e, \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u0432\u043d\u0435, \u043e\u043d\u043e \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f (\u043b\u0443\u0447\u0448\u0435 \u043d\u0430 \u043f\u043e\u0440\u0442\u0430\u043b\u0430\u0445)\n",(0,r.kt)("a",{parentName:"p",href:"https://replit.com/@EmilZaripovFL/React#src/components/Modal.tsx"},"https://replit.com/@EmilZaripovFL/React#src/components/Modal.tsx"),"\n\u2022 \u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u044b css and react \u0437\u043d\u0430\u0435\u0448\u044c \u0438 \u043a\u0430\u043a\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 (className and css/scss/stylus/modules; inline styles; CSS-in-JS)\n\u2022 \u0420\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0445 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439\n\u2022 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Ref\n\u2022 \u0421\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (SynteticEvent) \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435, \u0437\u0430\u0447\u0435\u043c \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043d\u043e\n\u2022 Routing\n\u2022 Functional components vs Class components:\n\u2022 React Hooks: Explain why and when would you use useMemo()?\nAnswer\nWhy:\nIn the lifecycle of a component, React re-renders the component when an update is made. When React checks for any changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality and shallow comparisons. This change in the React application will cause it to re-render unnecessarily."),(0,r.kt)("p",null,"Additionally, if that re-rendering is an expensive operation, like a long for loop, it can hurt performance. Expensive operations can be costly in either time, memory, or processing."),(0,r.kt)("p",null,"When:\nOptimal if the wrapped function is large and expensive."),(0,r.kt)("p",null,"How:\nMemoization is an optimization technique which passes a complex function to be memoized. In memoization, the result is \u201cremembered\u201d when the same parameters are passed-in subsequently."),(0,r.kt)("p",null,"const memoizedValue = React.useMemo(() => computeExpensiveValue(a, b), ","[a, b]",");\nuseMemo takes in a function and an array of dependencies. The dependency\u2019s list are the elements useMemo watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don\u2019t change, it doesn\u2019t matter if our entire component re-renders, the function won\u2019t re-run but instead return the stored result.\n\u2022 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u0434\u0430:\nthis.setState({\ncounter: this.state.counter + this.props.increment,\n});\nAnswer\nBecause this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state. To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:\n// Correct\nthis.setState((state, props) => ({\ncounter: state.counter + props.increment\n}));\n\u2022 \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 useCallback \u0438 useMemo?\nWith useCallback you memoize functions, useMemo memoizes any computed value:\nconst fn = () => 42 // assuming expensive calculation here\nconst memoFn = useCallback(fn, ","[dep]",") // (1)\nconst memoFnReturn = useMemo(fn, ","[dep]",") // (2)\n(1) will return a memoized version of fn - same reference across multiple renders, as long as dep is the same. But every time you invoke memoFn, that complex computation starts again.\n(2) will invoke fn every time dep changes and remember its returned value (42 here), which is then stored in memoFnReturn.\n\u2022 \u0412"))}p.isMDXComponent=!0}}]);