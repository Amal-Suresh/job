"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[2671],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>d});var t=n(7294);function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){l(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,l=function(e,r){if(null==e)return{};var n,t,l={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(l[n]=e[n]);return l}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=t.createContext({}),s=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=s(e.components);return t.createElement(u.Provider,{value:r},e.children)},v="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),v=s(n),m=l,d=v["".concat(u,".").concat(m)]||v[m]||c[m]||a;return n?t.createElement(d,o(o({ref:r},p),{},{components:n})):t.createElement(d,o({ref:r},p))}));function d(e,r){var n=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i[v]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4141:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>v,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var t=n(7462),l=(n(7294),n(3905));const a={},o="Binary Tree Level Order Traversal II",i={unversionedId:"algorithms/easy/binary-tree-level-order-traversal-ii",id:"algorithms/easy/binary-tree-level-order-traversal-ii",title:"Binary Tree Level Order Traversal II",description:"-   Difficulty: Easy.",source:"@site/interview/algorithms/easy/binary-tree-level-order-traversal-ii.md",sourceDirName:"algorithms/easy",slug:"/algorithms/easy/binary-tree-level-order-traversal-ii",permalink:"/algorithms/easy/binary-tree-level-order-traversal-ii",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/easy/binary-tree-level-order-traversal-ii.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Best Time to Buy and Sell Stock",permalink:"/algorithms/easy/best-time-to-buy-and-sell-stock"},next:{title:"Binary Watch",permalink:"/algorithms/easy/binary-watch"}},u={},s=[{value:"Problem",id:"problem",level:2},{value:"Solution 1",id:"solution-1",level:2},{value:"Solution 2",id:"solution-2",level:2},{value:"Solution 3",id:"solution-3",level:2},{value:"Solution 4",id:"solution-4",level:2}],p={toc:s};function v(e){let{components:r,...n}=e;return(0,l.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"binary-tree-level-order-traversal-ii"},"Binary Tree Level Order Traversal II"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Difficulty: Easy."),(0,l.kt)("li",{parentName:"ul"},"Related Topics: Tree, Breadth-first Search."),(0,l.kt)("li",{parentName:"ul"},"Similar Questions: Binary Tree Level Order Traversal, Average of Levels in Binary Tree.")),(0,l.kt)("h2",{id:"problem"},"Problem"),(0,l.kt)("p",null,"Given a binary tree, return the ",(0,l.kt)("em",{parentName:"p"},"bottom-up level order")," traversal of its nodes' values. (ie, from left to right, level by level from leaf to root)."),(0,l.kt)("p",null,"For example:\nGiven binary tree ",(0,l.kt)("inlineCode",{parentName:"p"},"[3,9,20,null,null,15,7]"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,l.kt)("p",null,"return its bottom-up level order traversal as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[\n  [15,7],\n  [9,20],\n  [3]\n]\n")),(0,l.kt)("h2",{id:"solution-1"},"Solution 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function (root) {\n    var res = [];\n    helper(root, 0, res);\n    return res.reverse();\n};\n\nvar helper = function (root, level, res) {\n    if (!root) return;\n    if (!res[level]) res[level] = [];\n    res[level].push(root.val);\n    helper(root.left, level + 1, res);\n    helper(root.right, level + 1, res);\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Explain:")),(0,l.kt)("p",null,"nope."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Complexity:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,l.kt)("li",{parentName:"ul"},"Space complexity : O(n).")),(0,l.kt)("h2",{id:"solution-2"},"Solution 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function (root) {\n    var res = [];\n    helper(root, 0, res);\n    return res;\n};\n\nvar helper = function (root, level, res) {\n    if (!root) return;\n    if (res.length < level + 1) res.unshift([]);\n    res[res.length - level - 1].push(root.val);\n    helper(root.left, level + 1, res);\n    helper(root.right, level + 1, res);\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Explain:")),(0,l.kt)("p",null,"nope."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Complexity:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,l.kt)("li",{parentName:"ul"},"Space complexity : O(n).")),(0,l.kt)("h2",{id:"solution-3"},"Solution 3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function (root) {\n    var res = [];\n    var stack = [[root, 0]];\n    var level = 0;\n    var node = null;\n\n    while (stack.length) {\n        [node, level] = stack.pop();\n        if (node) {\n            if (res.length < level + 1) res.unshift([]);\n            res[res.length - level - 1].push(node.val);\n            stack.push([node.right, level + 1]);\n            stack.push([node.left, level + 1]);\n        }\n    }\n\n    return res;\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Explain:")),(0,l.kt)("p",null,"nope."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Complexity:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,l.kt)("li",{parentName:"ul"},"Space complexity : O(n).")),(0,l.kt)("h2",{id:"solution-4"},"Solution 4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function (root) {\n    var res = [];\n    var queue = [[root, 0]];\n    var level = 0;\n    var node = null;\n\n    while (queue.length) {\n        [node, level] = queue.shift();\n        if (node) {\n            if (res.length < level + 1) res.unshift([]);\n            res[res.length - level - 1].push(node.val);\n            queue.push([node.left, level + 1]);\n            queue.push([node.right, level + 1]);\n        }\n    }\n\n    return res;\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Explain:")),(0,l.kt)("p",null,"nope."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Complexity:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,l.kt)("li",{parentName:"ul"},"Space complexity : O(n).")))}v.isMDXComponent=!0}}]);