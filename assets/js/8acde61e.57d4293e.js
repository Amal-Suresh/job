"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[8474],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},l="Add Strings",o={unversionedId:"algorithms/easy/add-strings",id:"algorithms/easy/add-strings",title:"Add Strings",description:"-   Difficulty: Easy.",source:"@site/interview/algorithms/easy/add-strings.md",sourceDirName:"algorithms/easy",slug:"/algorithms/easy/add-strings",permalink:"/algorithms/easy/add-strings",draft:!1,editUrl:"https://github.com/izemil/job/edit/master/interview/algorithms/easy/add-strings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Digits",permalink:"/algorithms/easy/add-digits"},next:{title:"Balanced Binary Tree",permalink:"/algorithms/easy/balanced-binary-tree"}},s={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"add-strings"},"Add Strings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Difficulty: Easy."),(0,a.kt)("li",{parentName:"ul"},"Related Topics: Math."),(0,a.kt)("li",{parentName:"ul"},"Similar Questions: Add Two Numbers, Multiply Strings.")),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"Given two non-negative integers ",(0,a.kt)("inlineCode",{parentName:"p"},"num1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"num2")," represented as string, return the sum of ",(0,a.kt)("inlineCode",{parentName:"p"},"num1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"num2"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The length of both ",(0,a.kt)("inlineCode",{parentName:"li"},"num1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"num2")," is < 5100."),(0,a.kt)("li",{parentName:"ul"},"Both ",(0,a.kt)("inlineCode",{parentName:"li"},"num1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"num2")," contains only digits ",(0,a.kt)("inlineCode",{parentName:"li"},"0-9"),"."),(0,a.kt)("li",{parentName:"ul"},"Both ",(0,a.kt)("inlineCode",{parentName:"li"},"num1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"num2")," does not contain any leading zero."),(0,a.kt)("li",{parentName:"ul"},"You ",(0,a.kt)("strong",{parentName:"li"},"must not use any built-in BigInteger library")," or ",(0,a.kt)("strong",{parentName:"li"},"convert the inputs to integer")," directly.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function (num1, num2) {\n    var len1 = num1.length;\n    var len2 = num2.length;\n    var max = Math.max(len1, len2);\n    var res = Array(max);\n    var carry = 0;\n    var val = 0;\n\n    for (var i = 0; i < max; i++) {\n        val = Number(num1[len1 - 1 - i] || 0) + Number(num2[len2 - 1 - i] || 0) + carry;\n        carry = Math.floor(val / 10);\n        res[max - 1 - i] = val % 10;\n    }\n\n    return (carry || '') + res.join('');\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Explain:")),(0,a.kt)("p",null,"nope."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity :"),(0,a.kt)("li",{parentName:"ul"},"Space complexity :")))}m.isMDXComponent=!0}}]);